package org.androidorm.annotations.column;

import org.androidorm.accessors.DbDateFieldAccessor;
import org.androidorm.accessors.DbPropertyAccessor;
import org.androidorm.accessors.DbSimpleFieldAccessor;
import org.androidorm.annotations.GeneratedValue;
import org.androidorm.annotations.Id;
import org.androidorm.exceptions.AndroidOrmException;
import org.androidorm.exceptions.MappingException;
import org.androidorm.mutator.FieldMutator;
import org.junit.Test;

import java.util.Date;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

public class GeneratedValueApplierTest {

    @Test
    public void testGeneratedValueSequence() throws NoSuchFieldException, SecurityException, AndroidOrmException {
        GeneratedValueApplier applier = new GeneratedValueApplier();

        DbPropertyAccessor fieldMock = new DbSimpleFieldAccessor();
        fieldMock.setMutator(new FieldMutator(GeneratedValueApplierTestClass.class.getDeclaredField("field1")));
        applier.apply(fieldMock);
        assertTrue(fieldMock.isAutogenerated());
    }

    @Test
    public void testGeneratedValueType() throws NoSuchFieldException, SecurityException, AndroidOrmException {
        GeneratedValueApplier applier = new GeneratedValueApplier();

        DbPropertyAccessor fieldMock = new DbSimpleFieldAccessor();
        fieldMock.setMutator(new FieldMutator(GeneratedValueApplierTestClass.class.getDeclaredField("field5")));
        applier.apply(fieldMock);
        assertTrue(fieldMock.isAutogenerated());

        fieldMock = new DbSimpleFieldAccessor();
        fieldMock.setMutator(new FieldMutator(GeneratedValueApplierTestClass.class.getDeclaredField("field6")));
        try {
            applier.apply(fieldMock);
            fail();
        } catch (MappingException ex) {
            // ok
        }
        assertFalse(fieldMock.isAutogenerated());

        fieldMock = new DbDateFieldAccessor();
        fieldMock.setMutator(new FieldMutator(GeneratedValueApplierTestClass.class.getDeclaredField("field7")));
        try {
            applier.apply(fieldMock);
            fail();
        } catch (MappingException ex) {
            // ok
        }
        assertFalse(fieldMock.isAutogenerated());

        fieldMock = new DbSimpleFieldAccessor();
        fieldMock.setMutator(new FieldMutator(GeneratedValueApplierTestClass.class.getDeclaredField("field8")));
        try {
            applier.apply(fieldMock);
            fail();
        } catch (MappingException ex) {
            // ok
        }
        assertFalse(fieldMock.isAutogenerated());
    }

    private static class GeneratedValueApplierTestClass {

        @Id
        @GeneratedValue
        public int field1;

        @Id
        @GeneratedValue
        public int field5;

        @Id
        @GeneratedValue
        public double field6;

        @Id
        @GeneratedValue
        public Date field7;

        @Id
        @GeneratedValue
        public String field8;
    }
}