package org.androidorm;

import org.androidorm.accessors.DbAccessor;
import org.androidorm.entities.DbEntity;
import org.androidorm.exceptions.AndroidOrmException;
import org.androidorm.types.SimpleType;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

import java.util.Arrays;

import static org.junit.Assert.fail;
import static org.mockito.Matchers.anyObject;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.stub;

public final class TestHelper {

    private TestHelper() {

    }

    public static DbEntity createEntityMock(String tableName, DbAccessor... accessors) {
        DbEntity ret = mock(DbEntity.class);
        stub(ret.getIdAccessor()).toReturn(accessors[0]);
        stub(ret.getSimpleAccessors()).toReturn(Arrays.asList(accessors));
        stub(ret.getTableName()).toReturn(tableName);

        return ret;
    }

    @SuppressWarnings({"rawtypes"})
    public static DbAccessor createAccessorMock(final Object toPersist, boolean auto, Object value, final Class type) throws AndroidOrmException {
        DbAccessor ret = mock(DbAccessor.class);
        stub(ret.isAutogenerated()).toReturn(auto);
        stub(ret.extractValue(toPersist)).toReturn(value);
        stub(ret.getType()).toReturn(SimpleType.convert(type));

        Answer answer = new Answer<Void>() {
            @Override
            public Void answer(InvocationOnMock invocation) throws Throwable {
                if (invocation.getArguments()[0] != toPersist) {
                    fail("Expected to call set with object to persist");
                }

                Class<?> actualType = invocation.getArguments()[1].getClass();
                if (actualType != type) {
                    fail("Expected to call set with type " + type + " not type " + actualType);
                }

                return null;
            }
        };
        Mockito.doAnswer(answer).when(ret).setValue(anyObject(), anyObject());

        return ret;
    }

    public static DbAccessor createAccessorMock(Object toPersist, boolean auto, Object value) throws AndroidOrmException {
        return createAccessorMock(toPersist, auto, value, Integer.class);
    }
}
