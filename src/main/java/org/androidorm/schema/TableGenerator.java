package org.androidorm.schema;

import org.androidorm.accessors.DbAccessor;
import org.androidorm.entities.DbEntity;
import org.androidorm.utils.StringUtils;

import java.util.Collection;

/**
 * Class for creating sqlscripts based on {@link DbEntity}.
 */
public final class TableGenerator {

    private TableGenerator() {
    }

    /**
     * Get script for all tables represented by all given dbEntities.
     *
     * @param dbEntities collection of dbEntities
     * @return sql script
     */
    static String getTableDescriptors(Collection<DbEntity> dbEntities) {
        StringBuilder builder = new StringBuilder();

        for (DbEntity dbEntity : dbEntities) {
            builder.append(getTableDescriptor(dbEntity));
            builder.append("\n");
        }

        return builder.toString();
    }

    /**
     * Return sql script for given dbEntity.
     *
     * @param dbEntity dbEntity
     * @return sql script
     */
    static String getTableDescriptor(DbEntity dbEntity) {
        return String.format("CREATE TABLE %s (%s%s);", wrap(dbEntity.getTableName()), getColumnDescriptors(dbEntity), getConstraints(dbEntity));
    }

    /**
     * Return descriptors for given dbEntity columns.
     *
     * @param dbEntity dbEntity
     * @return sql for columns
     */
    private static String getColumnDescriptors(DbEntity dbEntity) {
        StringBuilder builder = new StringBuilder();

        boolean addComma = false;
        for (DbAccessor field : dbEntity.getSimpleAccessors()) {
            if (addComma) {
                builder.append(", ");
            }

            builder.append(getColumnDescriptor(field));

            addComma = true;
        }
        return builder.toString();
    }

    /**
     * Return column descriptor for given accessor.
     *
     * @param accessor accessor
     * @return sql script for column
     */
    private static String getColumnDescriptor(DbAccessor accessor) {
        return String.format("%s%s", getNameAndType(accessor), getBasicTraits(accessor));
    }

    /**
     * Return sql name and type of column for given accessor.
     *
     * @param accessor accessor
     * @return sql column name and type
     */
    private static String getNameAndType(DbAccessor accessor) {
        String value = wrap(accessor.getName());

        value += " ";
        value += accessor.getType().getDbType().name();
        return value;
    }

    /**
     * Return basic traits of column for given accessor.
     *
     * @param accessor accessor
     * @return basic traits
     */
    private static String getBasicTraits(DbAccessor accessor) {
        StringBuilder builder = new StringBuilder();

        if (accessor.isId()) {
            builder.append(" PRIMARY KEY");
        }

        if (accessor.isAutogenerated()) {
            builder.append(" AUTOINCREMENT");
        }

        if (!accessor.isNullable()) {
            builder.append(" NOT NULL");
        }

        if (accessor.isUnique()) {
            builder.append(" UNIQUE");
        }

        return builder.toString();
    }

    /**
     * Return column constraints for given dbEntity.
     *
     * @param entity dbEntity
     * @return column constraints
     */
    private static String getConstraints(DbEntity entity) {
        String[][] constraints = entity.getUniqueConstraints();
        if (constraints == null || constraints.length == 0) {
            return "";
        }

        StringBuilder builder = new StringBuilder(", ");

        boolean addComma = false;
        for (String[] constraint : constraints) {
            if (addComma) {
                builder.append(", ");
            }

            builder.append("UNIQUE(\"");
            builder.append(StringUtils.join(constraint, "\", \"", null));
            builder.append("\")");

            addComma = true;
        }
        return builder.toString();
    }

    /**
     * Wrap string in quotes.
     *
     * @param value string to wrap
     * @return wrapped string
     */
    private static String wrap(String value) {
        if (value == null) {
            return "null";
        }

        return "\"" + value + "\"";
    }
}
