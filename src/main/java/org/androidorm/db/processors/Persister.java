package org.androidorm.db.processors;

import android.content.ContentValues;
import org.androidorm.SchemaManager;
import org.androidorm.accessors.DbAccessor;
import org.androidorm.db.DatabaseProvider;
import org.androidorm.db.DbRepresentation;
import org.androidorm.db.PersistenceUnit;
import org.androidorm.entities.DbEntity;
import org.androidorm.exceptions.AndroidOrmException;
import org.androidorm.exceptions.EntityStateException;
import org.androidorm.utils.ReflectionHelper;

/**
 * Processor for persisting entity to database.
 */
public class Persister {

    private final SchemaManager schemaManager;

    private final PersistenceUnit persistenceUnit;

    private final DatabaseProvider dbProvider;

    private Object entity;

    private DbEntity dbEntity;

    private DbAccessor idAccessor;

    /**
     * Constructor.
     *
     * @param schemaManager   schema manager
     * @param persistenceUnit persistence unit
     * @param dbProvider      database provider
     */
    public Persister(SchemaManager schemaManager, PersistenceUnit persistenceUnit, DatabaseProvider dbProvider) {
        this.schemaManager = schemaManager;
        this.persistenceUnit = persistenceUnit;
        this.dbProvider = dbProvider;
    }

    /**
     * Persist given entity to database.
     *
     * @param entityArg entity to persist
     * @throws AndroidOrmException if any problem occured persisting entity
     */
    public void persist(Object entityArg) throws AndroidOrmException {
        this.entity = entityArg;
        validateAll();
        insert();
    }

    /**
     * Validate and configure entity.
     *
     * @throws AndroidOrmException if validation or configuration failed
     */
    private void validateAll() throws AndroidOrmException {
        validateClassAndState();
        validateId();
        validateRelations();
    }

    /**
     * Validate entity class - if entity is entity class; and state - if entity is detached.
     *
     * @throws EntityStateException if validation failed
     */
    private void validateClassAndState() throws EntityStateException {
        Validators.assertNotNull(entity);
        dbEntity = Validators.checkDbEntity(entity.getClass(), schemaManager);
        Validators.assertDetached(entity, persistenceUnit);
    }

    /**
     * Validate id - should be set unless it is autogenerated.
     *
     * @throws AndroidOrmException if validation failed
     */
    private void validateId() throws AndroidOrmException {
        idAccessor = dbEntity.getIdAccessor();
        Object idValue = idAccessor.extractValue(entity);
        boolean emptyId = ReflectionHelper.isEmpty(idValue);

        if (!emptyId && idAccessor.isAutogenerated()) {
            throw new EntityStateException("Entity of class %s can't have id set, as it is autoincremented", entity.getClass());
        }

        if (emptyId && !idAccessor.isAutogenerated()) {
            throw new EntityStateException("Entity of class %s must have id set, as it is not autoincremented", entity.getClass());
        }
    }

    /**
     * Validate entity foreign relations.
     *
     * @throws AndroidOrmException if validation failed
     */
    private void validateRelations() throws AndroidOrmException {
        persistenceUnit.checkRelations(entity, dbEntity);
    }

    /**
     * Insert entity into database and persistence unit.
     *
     * @throws AndroidOrmException if insertion failed
     */
    private void insert() throws AndroidOrmException {
        DbRepresentation representation = new DbRepresentation(entity, dbEntity);
        ContentValues values = representation.getAsContentValues();
        String tableName = dbEntity.getTableName();

        long inserted = dbProvider.insertToDb(tableName, values);
        persistenceUnit.put(entity, representation);

        updateIdIfAutogenerated(inserted);
        representation.synchornizeState();
    }

    /**
     * If entity identifier should be autogenerated, then set newId to it.
     *
     * @param newId generated id
     * @throws AndroidOrmException if setting identifier value failed
     */
    private void updateIdIfAutogenerated(long newId) throws AndroidOrmException {
        if (idAccessor.isAutogenerated()) {
            Object accessorValue = idAccessor.getType().castFromLong(newId);
            idAccessor.setValue(entity, accessorValue);
        }
    }
}
