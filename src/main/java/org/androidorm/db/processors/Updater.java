package org.androidorm.db.processors;

import android.content.ContentValues;
import org.androidorm.accessors.DbAccessor;
import org.androidorm.db.DatabaseProvider;
import org.androidorm.db.DbRepresentation;
import org.androidorm.db.PersistenceUnit;
import org.androidorm.entities.DbEntity;
import org.androidorm.exceptions.AndroidOrmException;
import org.androidorm.exceptions.DatabaseStateException;
import org.androidorm.exceptions.EntityStateException;
import org.androidorm.utils.ReflectionHelper;

/**
 * Processor for updating entity in database.
 */
public class Updater {

	private final PersistenceUnit persistenceUnit;

	private final DatabaseProvider dbProvider;

	private Object entity;

	private DbEntity dbEntity;

	private DbRepresentation currentRepresentation;

	/**
	 * Constructor.
	 * 
	 * @param persistenceUnit persistence unit
	 * @param dbProvider database provider
	 */
	public Updater(PersistenceUnit persistenceUnit, DatabaseProvider dbProvider) {
		this.persistenceUnit = persistenceUnit;
		this.dbProvider = dbProvider;
	}

	/**
	 * Updates entity in database.
	 * 
	 * @param entityArg entity to update
	 * @throws AndroidOrmException if entity is detached or incorrect
	 */
	public void update(Object entityArg) throws AndroidOrmException {
		this.entity = entityArg;
		validateAll();
		update();
	}

	/**
	 * Validate and configure entity.
	 * 
	 * @throws AndroidOrmException if validation or configuration failed
	 */
	private void validateAll() throws AndroidOrmException {
		validateClassAndState();
		validateId();
		validateRelations();
	}

	/**
	 * Validate entity class - if entity is entity class; and state - if entity is attached.
	 * 
	 * @throws EntityStateException if validation failed
	 */
	private void validateClassAndState() throws EntityStateException {
		Validators.assertNotNull(entity);
		currentRepresentation = Validators.checkAttached(entity, persistenceUnit);
		dbEntity = currentRepresentation.getDbEntity();
	}

	/**
	 * Validate id - should be set.Can be changed unless is autogenerated.
	 * 
	 * @throws AndroidOrmException if validation failed
	 */
	private void validateId() throws AndroidOrmException {
		DbAccessor idAccessor = dbEntity.getIdAccessor();
		Object newId = idAccessor.extractValue(entity);

		if (ReflectionHelper.isEmpty(newId)) {
			throw new IllegalArgumentException("[Id=" + newId + "] is incorrect id value");
		}

		if (idAccessor.isAutogenerated()) {
			if (!currentRepresentation.getDbIdValue().equals(newId)) {
				throw new IllegalArgumentException("Can't update autoincremented id");
			}
		}
	}

	/**
	 * Validate entity foreign relations.
	 * 
	 * @throws AndroidOrmException if validation failed
	 */
	private void validateRelations() throws AndroidOrmException {
		persistenceUnit.checkRelations(entity, dbEntity);
	}

	/**
	 * Update entity in database and persistence unit.
	 * 
	 * @throws AndroidOrmException if updating failed
	 */
	private void update() throws AndroidOrmException {
		DbRepresentation newRepresentation = new DbRepresentation(entity, dbEntity);
		ContentValues values = newRepresentation.getAsContentValues();

		String tableName = dbEntity.getTableName();
		String idField = dbEntity.getIdAccessor().getName();
		Object oldId = currentRepresentation.getDbIdValue();

		int updated = dbProvider.updateInDb(tableName, values, idField, oldId);
		if (updated == 0) {
			throw new DatabaseStateException("Can't update entity %s - can't find entity[id=%s] in database", dbEntity.getEntityClass(),
					oldId);
		}

		persistenceUnit.update(entity, newRepresentation);
	}
}
