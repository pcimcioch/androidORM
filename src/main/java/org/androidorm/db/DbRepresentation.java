package org.androidorm.db;

import android.content.ContentValues;
import org.androidorm.accessors.DbAccessor;
import org.androidorm.entities.DbEntity;
import org.androidorm.exceptions.AndroidOrmException;
import org.androidorm.exceptions.ReflectionException;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

/**
 * Representation of attached entity database state.
 */
public class DbRepresentation {

    private final Object entity;

    private final DbEntity dbEntity;

    private DbAccessor idAccessor;

    // ******* database state *******
    private Object idDbValue;

    private Map<DbAccessor, Object> externalAccessorValuesMap = new HashMap<DbAccessor, Object>();

    /**
     * Constructor. Creates representation of entity.
     *
     * @param entity   entity
     * @param dbEntity entity's dbEntity
     * @throws ReflectionException if constructing state went wrong
     */
    public DbRepresentation(Object entity, DbEntity dbEntity) throws ReflectionException {
        this.entity = entity;
        this.dbEntity = dbEntity;

        for (DbAccessor accessor : dbEntity.getSimpleAccessors()) {
            if (accessor.isId()) {
                idAccessor = accessor;
                break;
            }
        }

        synchornizeState();
    }

    /**
     * Constructor. Creates copy of given representation.
     *
     * @param origin original representation to copy
     */
    public DbRepresentation(DbRepresentation origin) {
        this.entity = origin.entity;
        this.dbEntity = origin.dbEntity;
        this.idAccessor = origin.idAccessor;
        this.idDbValue = origin.idDbValue;

        for (Entry<DbAccessor, Object> entry : origin.externalAccessorValuesMap.entrySet()) {
            this.externalAccessorValuesMap.put(entry.getKey(), entry.getValue());
        }
    }

    /**
     * Creates state and populates entity properties with given values.
     *
     * @param values array of values in the order the same as simple accessors in dbEntity
     * @throws AndroidOrmException if creatin failed
     */
    public void createFromValues(Object[] values) throws AndroidOrmException {
        int i = 0;
        for (DbAccessor accessor : dbEntity.getSimpleAccessors()) {
            Object extractedValue = values[i++];
            if (!accessor.setValue(entity, extractedValue)) {
                setExternalAccessorValue(accessor, extractedValue);
            }
        }

        synchornizeState();
    }

    /**
     * Synchronizes state with entity.
     *
     * @throws ReflectionException if anything went wrong
     */
    public void synchornizeState() throws ReflectionException {
        this.idDbValue = extractIdValue();
    }

    /**
     * Return entity of this state.
     *
     * @return entity
     */
    public Object getEntity() {
        return entity;
    }

    /**
     * Return this enity's dbEntity.
     *
     * @return dbEntity
     */
    public DbEntity getDbEntity() {
        return dbEntity;
    }

    /**
     * Return values of simple properties as {@link ContentValues}.
     *
     * @return content values
     * @throws ReflectionException if extracting values failed
     */
    public ContentValues getAsContentValues() throws ReflectionException {
        ContentValues values = new ContentValues();
        for (DbAccessor accessor : dbEntity.getSimpleAccessors()) {
            Object accessorValue = accessor.extractValue(entity);
            if (!(accessor.isId() && accessor.isAutogenerated())) {
                accessor.getType().insert(values, accessor.getName(), accessorValue);
            }
        }

        return values;
    }

    /**
     * Get value of identifier.
     *
     * @return identifier value
     */
    public Object getDbIdValue() {
        return idDbValue;
    }

    /**
     * Get external value (the value that is not directly mapped to database) for given accessor.
     *
     * @param accessor accessor
     * @return external value or null if searched value couldn't be found
     */
    public Object getExternalAccessorValue(DbAccessor accessor) {
        return externalAccessorValuesMap.get(accessor);
    }

    /**
     * Set external value for given accessor.
     *
     * @param accessor      accessor
     * @param externalValue value to set
     */
    private void setExternalAccessorValue(DbAccessor accessor, Object externalValue) {
        externalAccessorValuesMap.put(accessor, externalValue);
    }

    /**
     * Extracts identifier value from entity.
     *
     * @return extracted value
     * @throws ReflectionException if extraction failed
     */
    private Object extractIdValue() throws ReflectionException {
        return idAccessor.extractValue(entity);
    }
}
