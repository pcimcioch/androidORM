package org.androidorm.accessors;

import org.androidorm.annotations.column.ColumnApplier;
import org.androidorm.exceptions.AndroidOrmException;
import org.androidorm.exceptions.MappingException;
import org.androidorm.exceptions.ReflectionException;
import org.androidorm.types.SimpleType;
import org.androidorm.utils.IAnnotable;
import org.androidorm.utils.StringUtils;

import java.util.Locale;

/**
 * Abstract class that represents bridge between property in database (column) and java type that is mapped to it.
 */
public abstract class DbAccessor implements IAnnotable {

    private String name;

    private boolean nullable = true;

    private boolean unique;

    private int length = ColumnApplier.DEFAULT_LENGTH;

    private boolean id;

    private boolean autogenerated;

    protected DbAccessor() {
    }

    /**
     * Returns if property is autogenerated.
     *
     * @return if property is autogenerated
     */
    public boolean isAutogenerated() {
        return autogenerated;
    }

    /**
     * Sets if property is autogenerated.
     *
     * @param auto if property is autogenerated
     */
    public void setAutogenerated(boolean auto) {
        this.autogenerated = auto;
    }

    /**
     * Returns real type of class attribute that will be mapped to this database property.
     *
     * @return real type
     */
    public abstract Class<?> getRealType();

    /**
     * Return one of the simple Types this field is represented by.
     *
     * @return simple type
     */
    public abstract SimpleType getType();

    /**
     * Sets name for this database property.
     *
     * @param name name to set
     * @throws MappingException if name is not well formatted
     */
    public void setName(String name) throws MappingException {
        if (StringUtils.isNotEmpty(name)) {
            StringUtils.checkName(name);
            this.name = name.toUpperCase(Locale.ENGLISH);
        }
    }

    /**
     * Gets this property database name.
     *
     * @return databse name of this property
     */
    public String getName() {
        return name;
    }

    /**
     * Sets if this property is allowed to be null.
     *
     * @param nullable if this property can be null
     */
    public void setNullable(boolean nullable) {
        this.nullable = nullable;
    }

    /**
     * Returns if this property can be null.
     *
     * @return if this property can be null
     */
    public boolean isNullable() {
        return nullable;
    }

    /**
     * Sets if this property must be unique.
     *
     * @param unique if this property can be unique
     */
    public void setUnique(boolean unique) {
        this.unique = unique;
    }

    /**
     * Returns if this property must be unique.
     *
     * @return if this property must be unique
     */
    public boolean isUnique() {
        return unique;
    }

    /**
     * Sets maximum length of text property.
     *
     * @param length maximum length of text property
     */
    public void setLength(int length) {
        this.length = length;
    }

    /**
     * Gets maximum length of text property.
     *
     * @return maximum length of text property
     */
    public int getLength() {
        return length;
    }

    /**
     * Sets if this id is identifier.
     *
     * @param id if this property is identifier
     */
    public void setId(boolean id) {
        this.id = id;
    }

    /**
     * Returns if this property is identifier.
     *
     * @return if this property is identifier
     */
    public boolean isId() {
        return id;
    }

    /**
     * Gets POJO field name.
     *
     * @return POJO field name
     */
    public abstract String getFieldName();

    /**
     * Extract value. Returned value will be of type {@link #getType()}.
     *
     * @param target object from which value ill be extracted
     * @return extracted value of simple type {@link #getType()}
     * @throws ReflectionException the exception
     */
    public abstract Object extractValue(Object target) throws ReflectionException;

    /**
     * Sets value.
     *
     * @param target object that should have this value set
     * @param value  value to set, Should be of simple type {@link #getType()}
     * @return true ig value was set, false if value should be passed to {@link org.androidorm.db.DbRepresentation#setExternalAccessorValue(DbAccessor, Object)} )}
     * @throws AndroidOrmException the exception
     */
    public abstract boolean setValue(Object target, Object value) throws AndroidOrmException;

}
